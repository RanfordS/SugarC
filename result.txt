arg[1] = test.sgr
parseInitial complete
checking brackets
success

token tree
    TK_COMMENT_LINE          - ` comment`
    TK_GENERIC_NOUN          - `Float`
    TK_OPERATOR              - `:`
    TK_GENERIC_NOUN          - `foo`
    TK_BRACKET_ROUND_OPEN    - `(`
        TK_GENERIC_NOUN          - `Int`
        TK_OPERATOR              - `:`
        TK_GENERIC_NOUN          - `bar`
    TK_BRACKET_CURLY_OPEN    - `{`
        TK_COMMENT_LINE          - `	non ascii characters, such as ランフォード,`
        TK_COMMENT_LINE          - `	are not permitted outside of comments or strings`
        TK_GENERIC_NOUN          - `return`
        TK_GENERIC_NOUN          - `bar`
        TK_OPERATOR              - `+`
        TK_LITERAL_NUMBER        - `1.0f`
        TK_OPERATOR              - `;`
    TK_COMMENT_BLOCK         - `	Standard main file definition,
	nothing much here `
    TK_GENERIC_NOUN          - `Int`
    TK_OPERATOR              - `:`
    TK_GENERIC_NOUN          - `main`
    TK_BRACKET_ROUND_OPEN    - `(`
        TK_GENERIC_NOUN          - `argc`
        TK_OPERATOR              - `,`
        TK_OPERATOR              - `&`
        TK_OPERATOR              - `&`
        TK_GENERIC_NOUN          - `Char`
        TK_OPERATOR              - `:`
        TK_GENERIC_NOUN          - `argv`
    TK_BRACKET_CURLY_OPEN    - `{`
        TK_GENERIC_NOUN          - `printf`
        TK_BRACKET_ROUND_OPEN    - `(`
            TK_LITERAL_STRING        - `"Hello \"world\"\n"`
        TK_OPERATOR              - `;`
        TK_GENERIC_NOUN          - `return`
        TK_LITERAL_NUMBER        - `0`
        TK_OPERATOR              - `;`
    TK_COMMENT_LINE          - ` end of file`
