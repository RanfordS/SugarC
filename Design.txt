~@> Summary of Goals


Consistent naming convention
e.g. all types use PascalCase

Custom operators
e.g. `Infix Float: (Vec: a) \dot (Vec: b) {...}`

Implict type continuation
e.g. `Vec: swap (v, Int: i, j) {...}`

Pointer declarations that are easier to understand
e.g. `int *const a;` -> `Const &Int: a;`

Slightly better syntax order for addressing and dereferencing.
e.g. `int *ptr = &some.value;` -> `&Int: ptr = some.value&;`
e.g. `int value = *some.ptr;` -> `Int: value = some.ptr@;`

One language for both program and macros.
e.g. `#define SOME_CONST 420` -> `Sugar Int: SOME_CONST = 420;`


~@> Declarations

?modifiers type: name;

~> Examples

> C

#include "other.h"

#define IMPORTANT_CONST 3.14

const int *a;                   // pointer to constant int
int *const b;                   // constant pointer to int
const int *const c;             // constant pointer to constant int
int d = *b;                     // d = the value at address b
int* e = &d;                    // e = pointer to address of d

Vec3* v;
float x = v->x;                 // `->` adds offset of and dereferences
float* px = &v->x;              // C++ has `.*` and `->*`

struct SomeStruct* structure;
int val = *structure->ptr;

double values[n];



int main (int argc, char **argv)
{
    return 0;
}



void qsort (void* base, size_t nitems, size_t size, int (*compar)(const void*, const void*);

int cmpfunc (const void* a, const void* b)
{
    return *(int*)a - *(int*)b;
}

#define ISLETTER(c) (('A' <= (c) && 'Z' <= (c)) || ('a' <= (c) && 'z' <= (c)))

int a;
float b = 1.0f + *(float*)(void*)(&a);



> SugarC

include "other.hgr"

Sugar: IMPORTANT_CONST = 3.14;

&Const Int: a;                  // pointer to constant int
Const &Int: b;                  // constant pointer to int
Const &Const Int: c;            // constant pointer to constant int
Int: d = @b;                    // d = the value at address b
&Int: e = &d;                   // e = pointer to address of d

&Vec3: v;
Float: x = v.x;                 // `.` for pointers equivalent to C `->`
&Float: px = &v.x;

&SomeStruct: structure;
Int: val = @structure.ptr       // @ dereferences `ptr`, not `structure`

[n] Double: values;
SomeStruct[n]: soa;       // structure of arrays declaration?



Function Int: main (argc, &&Char: argv)
{
    return 0;
}



Void: qsort (&Void: base, Size: nitem, size, Function Int: compar (&Const Void: 2));

Function Int: cmpfunc (&Const Void: a, b)
{
    return @(&Int: a) - @(&Int: b);
}

Function Sugar: ISLETTER (c)
{
    return 'A' <= c <= 'Z' || 'a' <= c <= 'z';
}

Int: a;
Float: b = 1.0f + (!Float: a);



~@> Infix Example

Infix Float: (Vec3: a) \dot (Vec3: b)
{
    Float: acc = 0;
    for (Size: i -> 3)
        acc += a[i]*b[i];

    return acc;
}

Vec3: u, v;
Float: udv = u \dot v;



~@> Sugar Example

Sugar: max (a, b)
{
    if (a < b)
        return b;
    return a;
}

Sugar: min (a, b)
{
    if (a < b)
        return a;
    return b;
}

Prefix Sugar: \not (a)
{
    return !a;
}

// short-circuit and/or

Infix Sugar: (a) \and (b)
{
    if (a)
        return b;
    return a;
}

Infix Sugar: (a) \or (b)
{
    if (!a)
        return b;
    return a;
}

// adding `b;` at the top of either function body will disable the short-circuit



// example sugar usage

c = a \or b;
f = (c+1) \and (d-1);

// expands to

if (!a) c = b;
else c = a;

temp = c+1;
if (temp) f = d-1;
else f = temp;



~@> Possible Loop declarations

// standard C-style for loop
for (Size: i = 0; i < n; ++i) { ... }

// optional range version
for (Size: i = 0 -> n) { ... }

// range implicitly starts at 0
for (Size: i -> n) { ... }

// default type for undeclared variables is same a range end?
for (i -> n) { ... }
// this would fly in the face of explicit declaration principles



~@> Standard Types

Bool    (i1)
Char    (i8)
Byte    (i8)
Int     (i32)   { Both Int and UInt may be followed by any compile time number
UInt    (i32)     If non is provided, 32 is used as the default                }
Size    (i64)   { equivalent to size_t, i64 should always satisfy the standard }
Half    (half)
Float   (float)
Double  (double)
Void
Function
[]

Enum
BitField      { Acts like Enum, but members are numbered according to (1 << i) }

~@> Standard Modifiers

Volatile
Restrict
Align8 Align16 Align32 Align64
Const
Atomic
Extern
Inline
Prefix Infix Suffix  { Custom operator declarations }
Macro                { Used instead of #define }
Sugar                { Full body function-style macros, supports short-circuit }

~@> Control Flow Keywords

switch
    case
    default
    break
do while for
    continue
    break
if else
goto label
return

~@> Operators

Category:
    Name            Symbol  Assignment

Arithmetic:
    Unary plus      +$
    Unary minus     -$
    Assignment      $=$
    Addition        $+$     $+=$
    Subtraction     $-$     $-=$
    Multiplication  $*$     $*=$
    Division        $/$     $/=$
    Modulus         $%$     $%=$
    Preincrement    ++$
    Postincrement   $++
    Predecrement    --$
    Postdecrement   $--

Comparitive:
    Equality        $==$
    Inequality      $!=$
    Greater than    $>$
      or equal to   $>=$
    Less than       $<$
      or equal to   $<=$

Logical:
    Not             !$
    And             $&&$    $&&=$
    Or              $||$    $||=$
    Xor             $^^$    $^^=$

Bitwise:
    Not             ~$
    And             $&$     $&=$
    Or              $|$     $|=$
    Xor             $^$     $^=$
    Shift left      $<<$    $<<=$
    Shift right     $>>$    $>>=$

Pointer Ops:
    Index           $[$]
    Member of       $.$
    Address of      &$
    At address      @$

Other:
    Function call   $($)
    Ternary         $?$:$
    Cast            ($:$)
    Reinterpret     (!$:$)
    End statement   $;
    Loop range      $->$

By Priority:
->   $++ $-- $($) $[$] $.$ $suffixnoun
<-   ++$ --$ +$ -$ !$ ~$ @$ &$ prefixnoun$
->   $*$ $/$ $%$ $infixnoun$
->   $+$ $-$
->   $<<$ $>>$
->   $<$ $<=$ $>$ $>=$
->   $==$ $!=$
->   $&$
->   $^$
->   $|$
->   $&&$
->   $^^$
->   $||$
->   $->$
<-   $=$ $+=$ $-=$ $*=$ $/=$ $%=$ $<<=$ $>>=$ $&=$ $^=$ $|=$
<-   $?$:$
->   $,$



~@> File Extensions

.sgr	.hgr
.sgr	.sgh
.sgr	.hdr
.sgrc   .sgrh

~@> Loops

for (Size: i = 0; i < n; ++i) {}
for (Size: i = 0 -> n) {}
for (Size: i -> n) {}
for (i -> n) {}

for (Size: i = 1; i < n; ++i) {}
for (Size: i = 1 -> n) {}

for (Size: i = 0; i < n; i += 2) {}
for (Size: i = 0 -> +2 -> n) {}

~@> Parsing

// difficult parsing
// - defered definition, complex variable definition, double address in type,
// - custom noun operator, mid-statement comment, vararg function
// - ranged loop, non-block loop

include "stdio" as io;

Struct: Vec3
{
    Float Array[3] v;
}

Infix Float: (Vec3: a) dot (Vec3: b);

Int: main (argc, &&Char: argv)
{
    Vec3: a = {.v = {0,1,2}}, b = {.v = {2,2,1}};
    Float: c = a /*awkward comment*/ dot b + 1;
    io.printf ("The answer is %f\n", c);
    return 0;
}

Infix Float: (Vec3: a) dot (Vec3: b)
{
    Float: sum = 0;
    for (Int: i -> 3)
        sum += a.v[i]*b.v[i];
    return sum;
}

// tokenized

Keyword String Noun Noun ;
Noun : Noun { Noun Noun [ Num ] Noun ; }
Noun Noun : ( Noun : Noun ) Noun ( Noun : Noun ) ;
Noun : Noun ( Noun , && Noun : Noun )
{
    Noun : Noun = { . Noun = { Num , Num , Num } } ,
           Noun = { . Noun = { Num , Num , Num } } ;
    Noun : Noun = Noun Comment Noun Noun + Num ;
    Noun . Noun ( String , Noun ) ;
    Keyword Num ;
}
Noun Noun : ( Noun : Noun ) Noun ( Noun : Noun )
{
    Noun : Noun = Num ;
    Keyword ( Noun : Noun -> Num )
        Noun += Noun . Noun [ Noun ] * Noun . Noun [ Noun ] ;
    Keywork Noun ;
}

// top-level summary

<type definition>
<infix declaration>
<function definition>
<infix definition>

