~@> Summary of Goals


Consistent naming convention
e.g. all types use PascalCase

Custom operators
e.g. `Infix Float: (Vec: a) dot (Vec: b)`

Implict type continuation
e.g. `Vec: swap (v, Int: i, j)`

Pointer declarations that are easier to understand
e.g. `int *const a` -> `Const &Int: a`


~@> Declarations

?modifiers type: name;

~> Examples

> C

const int *a;                   // pointer to constant int
int *const b;                   // constant pointer to int
const int *const c;             // constant pointer to constant int
int d = *b;                     // d = the value at address b
int* e = &d;                    // e = pointer to address of d

Vec3* v;
float x = v->x;                 // `->` adds offset of and dereferences
float* px = &v->x;

struct SomeStruct* structure;
int val = *structure->ptr;

double values[n];



int main (int argc, char **argv)
{
    return 0;
}



> SugarC

&Const Int: a;                  // pointer to constant int
Const &Int: b;                  // constant pointer to int
Const &Const Int: c;            // constant pointer to constant int
Int: d = @b;                    // d = the value at address b
&Int: e = &d;                   // e = pointer to address of d

&Vec3: v;
Float: x = v.x;                 // `.` for pointers equivalent to C `->`
&Float: px = &v.x;

&SomeStruct: structure;
Int: val = @structure.ptr       // @ dereferences `ptr`, not `structure`

Array[n] Double: values;
SomeStruct Array[n]: soa;       // structure of arrays declaration?



Int: main (Int: argc, &&Char: argv)
{
    return 0;
}

Define Int: main (Int: argc, &&Char: argv)
{
    return 0;
}

Function Int: main (Int: argc, &&Char: argv)
{
    return 0;
}



~@> Standard Types

Bool    (i1)
Char    (i8)
Byte    (i8)
Int     (i32)   { Both Int and UInt may be followed by any compile time number
UInt    (i32)     If non is provided, 32 is used as the default                }
Size    (i64)   { equivalent to size_t, i64 should always satisfy the standard }
Half    (half)
Float   (float)
Double  (double)
Void

Enum
BitField      { Acts like Enum, but members are numbered according to (1 << i) }

~@> Standard Modifiers

Volatile
Restrict
Align8 Align16 Align32 Align64
Const
Atomic
Extern
Inline
Prefix Infix Suffix
Sugar           { Used for macro-style declarations }

~@> Control Flow Keywords

switch
    case
    default
    break
do while for
    continue
    break
if else
goto label
return
