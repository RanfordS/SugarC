

Function Float:
physicsHullCollisionTime (&PhysicsHullReference: ref0, ref1, Float dt)
{
    PhysicsHullInstance: inst0, inst1;
    &inst0 from ref0;
    &inst1 from ref1;

    Float: tEvent = 0.0f;
    while (true)
    {
        &inst0 at tEvent;
        &inst1 at tEvent;
        PhysicsHullFeatures features = physicsHullFeatures (&inst0, &inst1);

        &Function Float: separation (&PhysicsHullInstance 2, &SeparationMeta);
        SeparationMeta meta;

        switch (features.featureClass)
        {
            case 0x11:
                separation = &separationPointVsPoint;
                break;

            case 0x12:
                separation = &separationLineVsPoint;
                break;

            case 0x21:
            case 0x22:
                separation = &separationPointVsLine;
                break;

            default:
                tEvent = -1;
                goto result;
                break;
        }

        Float: tUpper = dt;

        Float: sEvent = @separation (&inst0, &inst1, &meta);
        &inst0 at tUpper;
        &inst1 at tUpper;
        Float: sUpper = @separation (&inst0, &inst1, &meta);

        if (sUpper > 0.0f)
        {   tEvent = -1.0f;
            goto result;
        }

        if (sEvent < PHYS_HULL_TOL)
        {   goto result;
        }

        Int8: rootCycles = 16;
        while (!(sEvent < PHYS_HULL_TOL))
        {
            Float: tNew = (tEvent + tUpper)/2.0f;
            &inst0 at tNew;
            &inst1 at tNew;
            Float: sNew = @separation (&inst0, &inst1, &meta);

            if (sNew > 0)
            {   sEvent = sNew;
                tEvent = tNew;
            }
            else
            {   sUpper = sNew;
                tUpper = tNew;
            }
            if (--rootCycles == 0) break;
        }
    }

    label result;
    delete &inst0;
    delete &inst1;
    return tEvent;
}
