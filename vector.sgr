
Sugar for (Size: $N = 2 ->| 4)
{
    `` Mathematical vector type with $N components.
    Struct: Vec#$N
    {
        [$N] Float: data;

        Sugar switch ($N)
        {
            case 4:
                Sugar: .w { return self.data[3]; }
            case 3:
                Sugar: .z { return self.data[2]; }
            case 2:
                Sugar: .y { return self.data[1]; }
            case 1:
                Sugar: .x { return self.data[0]; }
                break;
        }

        Sugar: [i] { return self.data[i]; }
        Sugar Float: .mag { return Math.sqrt (self \dot self); }

        Sugar if (N == 2)
            Sugar self: .swap
            {
                Float: tmp = self.x;
                self.x = self.y;
                self.y = tmp;
            }
    }

    Infix Vec#$N: (a) + (b)
    {
        Vec#$N: c;
        for (i -> $N) c[i] = a[i] + b[i];
        return c;
    }

    Infix Vec#$N: (a) * (b)
    {
        Vec#$N: c;
        for (i -> $N) c[i] = a[i] * b[i];
        return c;
    }

    Function Float: vec#$N#_sum (Vec#$N: a)
    {
        Float: sum = 0;
        for (i -> $N) sum += a[i];
        return sum;
    }

    Function Float: vec#$N_dot (Vec#$N: a, b)
    {
        return vec#$N#_sum (a*b);
    }
}

