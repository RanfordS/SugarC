
Sugar for (Size: N = 2 ->| 4)
{
    `` Mathematical vector type with N components.
    Struct: Vec#N
    {
        [N] Float: data;

        Sugar switch (N)
        {
            case 4:
                Sugar: .w { return self.data[3]; }
                continue;
            case 3:
                Sugar: .z { return self.data[2]; }
                continue;
            case 2:
                Sugar: .y { return self.data[1]; }
                Sugar: .x { return self.data[0]; }
                break;
        }

        Sugar: [i] { return self.data[i]; }
        Sugar: .mag { return Math.sqrt (self \dot self); }

        Sugar if (N == 2)
            Sugar: .swap
            {
                Float: tmp = self.x;
                self.x = self.y;
                self.y = tmp;
            }
    }

    Function (Vec#N: a, b) -> Vec#N: vec#N#Add
    {
        Vec#N: c;
        for (i -> N) c[i] = a[i] + b[i];
        return c;
    }
    Infix: + = vec#N#Add;

    Function (Vec#N: a, b) -> Vec#N: vec#N#Sub
    {
        Vec#N: c;
        for (i -> N) c[i] = a[i] - b[i];
        return c;
    }
    Infix: - = vec#N#Sub;

    Function (Vec#N: a, b) -> Vec#N: vec#N#Mul
    {
        Vec#N: c;
        for (i -> N) c[i] = a[i] * b[i];
        return c;
    }
    Infix: * = vec#N#Mul;

    Function (Vec#N: a, b) -> Vec#N: vec#N#Div
    {
        Vec#N: c;
        for (i -> N) c[i] = a[i] / b[i];
        return c;
    }
    Infix: / = vec#N#Div;

    Function (Vec#N: a) -> Float: vec#N#Sum 
    {
        Float: sum = 0;
        for (i -> N) sum += a[i];
        return sum;
    }
    Sugar: Vec#N.sum = vec#N#Sum

    Function (Vec#N: a, b) -> Float: vec#N#Dot 
    {
        return vec#N#_sum (a*b);
    }
    Infix: \dot = vec#N#Dot;

    Function (Vec#N: a, Float: b): vec#N#AddFloat
    {
        Vec#N: c;
        for (i -> N) c[i] = a[i] + b;
        return c;
    }
    Commutative Infix: + = vec#N#AddFloat;

    Function (Vec#N: a, Float: b): vec#N#SubFloat
    {
        Vec#N: c;
        for (i -> N) c[i] = a[i] - b;
        return c;
    }
    Commutative Infix: - = vec#N#SubFloat;
}

Function (Vec3: a, b) -> Vec3: vec3_cross
{
    Vec3: c;
    c.x = a.y*b.z - a.z*b.y;
    c.y = a.z*b.x - a.x*b.z;
    c.z = a.x*b.y - a.y*b.x;
    return c;
}
Infix Vec3: \cross = vec3_cross;

